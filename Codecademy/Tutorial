# Set the variables to the values listed in the instructions!
my_int = 7
my_float = 1.23
my_bool = True

def spam():
eggs = 12
return eggs
       
print spam()
#Multi-line comment:
""" There are many person who are actually handsomier than you and me that you need to know.
"""
# Set count_to equal to the sum of two big numbers
count_to = 108 + 3000
addition = 72 + 23
subtraction = 108 - 204
multiplication = 108 * 0.5
division = 108 / 9
eggs = 10**2  # 10 to the power of 2
spam = 3 % 2 	# Modulo is used to find the remainder, normally used to find even or odd number.

# Assign the variable total on line 8!
meal = 44.50
tax = 0.0675
tip = 0.15
meal = meal + meal * tax
total = meal + meal * tip

print("%.2f" % total)

# The string below is broken. Fix it using the escape backslash!
'This isn\'t flying, this is falling with style!

"""
The string "PYTHON" has six characters,
numbered 0 to 5, as shown below:

+---+---+---+---+---+---+
| P | Y | T | H | O | N |
+---+---+---+---+---+---+
  0   1   2   3   4   5

So if you wanted "Y", you could just type
"PYTHON"[1] (always start counting from 0!)
"""
fifth_letter = "MONTY"[4]

print fifth_letter
parrot = "Norwegian Blue"
print len(parrot)
print parrot.lower()
print parrot.upper()

"""Declare and assign your variable on line 4,
then call your method on line 5!"""

pi = 3.14
print str(pi)

# Turn 3.14 into a string 
print "The value of pi is around " + str(3.14)
print "Spam " + "and " + "eggs"
string_1 = "Camelot"
string_2 = "place"

print "Let's not go to %s. 'Tis a silly %s." % (string_1, string_2)

name = raw_input("What is your name?")
quest = raw_input("What is your quest?")
color = raw_input("What is your favorite color?")

print "Ah, so your name is %s, your quest is %s, " \
"and your favorite color is %s." % (name, quest, color)
from datetime import datetime
now = datetime.now()
print now
print now.year
print now.month
print now.day
print '%s/%s/%s' % (now.month, now.day, now.year)
print '%s:%s:%s' % (now.hour,now.minute,now.second)

def clinic():
    print "You've just entered the clinic!"
    print "Do you take the door on the left or the right?"
    answer = raw_input("Type left or right and hit 'Enter'.").lower()
    if answer == "left" or answer == "l":
        print "This is the Verbal Abuse Room, you heap of parrot droppings!"
    elif answer == "right" or answer == "r":
        print "Of course this is the Argument Room, I've told you that already!"
    else:
        print "You didn't pick left or right! Try again."
        clinic()

clinic()
"""
Boolean Operators
------------------------      
True and True is True
True and False is False
False and True is False
False and False is False

True or True is True
True or False is True
False or True is True
False or False is False

Not True is False
Not False is True
"""

def using_control_once():
    if 2 > 1:
        return "Success #1"

def using_control_again():
    if 2 < 4:
        return "Success #2"

print using_control_once()
print using_control_again()

# Make sure that the_flying_circus() returns True
def the_flying_circus():
    if True:    # Start coding here!
        # Don't forget to indent
        # the code inside this block!
        return True
    elif True and 2**2 > 1:
        # Keep going here.
        # You'll want to add the else statement, too!
        return Flase
pyg = 'ay'

original = raw_input('Enter a word:')
word = original.lower()
first = word[0]
new_word = word[1:len(word)] + first + pyg

if len(original) > 0 and original.isalpha():
    print new_word
else:
    print 'empty'
def tax(bill):
    """Adds 6% tax to a restaurant bill."""
    bill *= 1.06
    print "With tax: %f" % bill
    return bill

def tip(bill):
    """Adds 10% tip to a restaurant bill."""
    bill *= 1.10
    print "With tip: %f" % bill
    return bill
    
meal_cost = 150
meal_with_tax = tax(meal_cost)
meal_with_tip = tip(meal_with_tax)
def cube(number):
    return number*number*number
    
def by_three(number):
    if number % 3 == 0:
        abc = cube(number)
        print "%d is the answer for %d which is divisble by 3." % (abc, number)
        return abc
    else:
        print "%d is not divisible by 3, please resubmit number that is divisible by 3" % (number)
        return False
        
by_three(3)
by_three(26)

def power(base, exponent):  # Add your parameters here!
    result = base**exponent
    print "%d to the power of %d is %d." % (base, exponent, result)

power(37,4)  # Add your arguments here!
# Ask Python to print sqrt(25) on line 3.
import math

print math.sqrt(25)

# Import *just* the sqrt function from math on line 3!
from math import sqrt

# Import *everything* from the math module on line 3!
from math import *
import math            # Imports the math module
everything = dir(math) # Sets everything to a list of things from math
print everything       # Prints 'em all!
def biggest_number(*args):
    print max(args)
    return max(args)
    
def smallest_number(*args):
    print min(args)
    return min(args)

def distance_from_zero(arg):
    print abs(arg)
    return abs(arg)


biggest_number(-10, -5, 5, 10)
smallest_number(-10, -5, 5, 10)
distance_from_zero(-10)

# Set maximum to the max value of any set of numbers on line 3!

maximum = max(2,5,99,11,100,22)
minimum = min(2,5,99,11,100,22)

print "Maximum number is %d, minimum number is %d" % (maximum, minimum)
absolute = abs(-42)

print absolute
# Print out the types of an integer, a float,
# and a string on separate lines below.


print type(5) # <type 'int'>
print type(5.225)  # <type 'float'>
print type("Ohohohoho!") # <type 'str'>

def shut_down(s):
    if s == "yes":
        return "Shutting down"
    elif s == "no":
        return "Shutdown aborted"
    else:
        return "Sorry"
        
print shut_down("yes")
print shut_down("no")
print shut_down("jskls")
def distance_from_zero (input):
    if type(input) == int or type(input) == float:
        return abs (input)
    else:
        return "Nope"
        
print distance_from_zero(-100.0005)
def hotel_cost(nights):
        return 140 * nights
        
def plane_ride_cost(city):
    if city == "Charlotte":
        return 183
    elif city == "Tampa":
        return 220
    elif city == "Pittsburgh":
        return 222
    elif city == "Los Angeles":
        return 475

def rental_car_cost(days):
    rccost = 40*days
    if days >= 7:
        return rccost - 50
    elif days >= 3:
        return rccost - 20
    else:
        return rccost
        
def trip_cost (city, days,spending_money):
    nights = days
    
    return hotel_cost(nights) + plane_ride_cost(city) + rental_car_cost(days) + spending_money
    
days_input = 5
nights_input = days_input
city_input = "Los Angeles"
spending_money_input = 600

print "For trip to %s, for %d days and %d nights , the cost are listed as below:" % (str(city_input), days_input, nights_input)

        
print "Hotel cost = %d" % (hotel_cost(nights_input))
print "Plane ride cost = %d" % (plane_ride_cost(city_input))
print "Car cost = %d with %d days." % (rental_car_cost(days_input),days_input) 
print "The trip total cost = %d" % (trip_cost(city_input,days_input,spending_money_input))

print trip_cost("Los Angeles", days_input, spending_money_input)
zoo_animals = ["pangolin", "cassowary", "sloth", "lion" ];
# One animal is missing!

if len(zoo_animals) > 3:
	print "The first animal at the zoo is the " + zoo_animals[0]
	print "The second animal at the zoo is the " + zoo_animals[1]
	print "The third animal at the zoo is the " + zoo_animals[2]
	print "The fourth animal at the zoo is the " + zoo_animals[3]
numbers = [5, 6, 7, 8]

print "Adding the numbers at indices 0 and 2..."
print numbers[0] + numbers[2]
print "Adding the numbers at indices 1 and 3..."
print numbers[1] + numbers[3]
zoo_animals = ["pangolin", "cassowary", "sloth", "tiger"]
# Last night our zoo's sloth brutally attacked 
#the poor tiger and ate it whole.

# The ferocious sloth has been replaced by a friendly hyena.
zoo_animals[2] = "hyena"

# What shall fill the void left by our dear departed tiger?
# Your code here!
zoo_animals[3] = "lion"
suitcase = [] 
suitcase.append("sunglasses")

# Your code here!
suitcase.append('pen')
suitcase.append('apple')
suitcase.append('pen-pineapple-apple-pen')




list_length = len(suitcase) # Set this to the length of suitcase

print "There are %d items in the suitcase." % (list_length)
print suitcase
suitcase = ["sunglasses", "hat", "passport", "laptop", "suit", "shoes"]

first  = suitcase[0:2]  # The first and second items (index zero and one)
middle = suitcase[2:4] # Third and fourth items (index two and three)
last   = suitcase[4:6] # The last two items (index four and five)
animals = "catdogfrog"
cat  = animals[:3]   # The first three characters of animals
dog  = animals[3:6]   # The fourth through sixth characters
frog = animals[6:11]   # From the seventh character to the end
animals = ["aardvark", "badger", "duck", "emu", "fennec fox"]
duck_index = animals.index("duck")    # Use index() to find "duck"

# Your code here!
animals.insert(duck_index, "cobra")


print animals # Observe what prints after the insert operation
my_list = [1,9,3,8,5,7]

for number in my_list:
    # Your code here
    print 2*number
start_list = [5, 3, 1, 2, 4]
square_list = []

# Your code here!
for number in start_list:
    square_list.append(number**2)
    square_list.sort()


print square_list

backpack = ['xylophone', 'dagger', 'tent', 'bread loaf']
backpack.remove('dagger')
print backpack

# Assigning a dictionary with three key-value pairs to residents:
residents = {'Puffin' : 104, 'Sloth' : 105, 'Burmese Python' : 106}

print residents['Puffin'] # Prints Puffin's room number

# Your code here!
print residents['Sloth'] 
print residents['Burmese Python']

menu = {} # Empty dictionary
menu['Chicken Alfredo'] = 14.50 # Adding new key-value pair
print menu['Chicken Alfredo']

# Your code here: Add some dish-price pairs to menu!
menu['Beef Alfredo'] = 18.50 
menu['Pork Alfredo'] = 16.50 
menu['Vege Alfredo'] = 11.50 

print "There are " + str(len(menu)) + " items on the menu."
print menu
# key - animal_name : value - location 
zoo_animals = { 'Unicorn' : 'Cotton Candy House',
'Sloth' : 'Rainforest Exhibit',
'Bengal Tiger' : 'Jungle House',
'Atlantic Puffin' : 'Arctic Exhibit',
'Rockhopper Penguin' : 'Arctic Exhibit'}
# A dictionary (or list) declaration may break across multiple lines

# Removing the 'Unicorn' entry. (Unicorns are incredibly expensive.)
del zoo_animals['Unicorn']

# Your code here!
del zoo_animals['Sloth']
del zoo_animals['Bengal Tiger']

zoo_animals['Rockhopper Penguin'] = 'Doraemon'
print zoo_animals
inventory = {
    'gold' : 500,
    'pouch' : ['flint', 'twine', 'gemstone'], # Assigned a new list to 'pouch' key
    'backpack' : ['xylophone','dagger', 'bedroll','bread loaf']
}

# Adding a key 'burlap bag' and assigning a list to it
inventory['burlap bag'] = ['apple', 'small ruby', 'three-toed sloth']

# Sorting the list found under the key 'pouch'
inventory['pouch'].sort() 

# Your code here
inventory['pocket'] = ['seashell','strange berry','lint']
inventory['backpack'].sort()
inventory['backpack'].remove('dagger')
inventory['gold'] = 550

webster = {
	"Aardvark" : "A star of a popular children's cartoon show.",
    "Baa" : "The sound a goat makes.",
    "Carpet": "Goes on the floor.",
    "Dab": "A small amount."
}

# Add your code below!
for x in webster:
    print webster[x]

print inventory
shopping_list = ["banana", "orange", "apple"]

stock = {
    "banana": 6,
    "apple": 0,
    "orange": 32,
    "pear": 15
}
    
prices = {
    "banana": 4,
    "apple": 2,
    "orange": 1.5,
    "pear": 3
}

# Write your code below!
def compute_bill(food):
    total = 0
    for item in food:
        if stock[item] > 0:
            total += prices[item] 
            stock[item] -= 1
    return total, stock

print compute_bill(shopping_list)

prices = {"banana": 4,"apple": 2,"orange": 1.5,"pear": 3}
stock = {"banana":6,"apple":0,"orange":32,"pear":15}

for key in prices:
    print key
    print "price: %s" % (prices[key])
    print "stock: %s" % (stock[key])
    

a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

for number in a:
    if number % 2 == 0:
        print number
# Write your function below!
def fizz_count(x):
    count = 0
    for item in x:
        if item == "fizz":
            count = count + 1
    return count
        
print fizz_count(["fizz","cat","fizz"])
for letter in "Codecademy":
    print letter
    
# Empty lines to make the output pretty
print
print

word = "Programming is fun!"

for letter in word:
    # Only print out the letter i
    if letter == "i":
        print letter

lloyd = {
    "name": "Lloyd",
    "homework": [90.0, 97.0, 75.0, 92.0],
    "quizzes": [88.0, 40.0, 94.0],
    "tests": [75.0, 90.0]
}
alice = {
    "name": "Alice",
    "homework": [100.0, 92.0, 98.0, 100.0],
    "quizzes": [82.0, 83.0, 91.0],
    "tests": [89.0, 97.0]
}
tyler = {
    "name": "Tyler",
    "homework": [0.0, 87.0, 75.0, 22.0],
    "quizzes": [0.0, 75.0, 78.0],
    "tests": [100.0, 100.0]
}

# Add your function below!
def average(numbers):
    total = sum(numbers)
    total = float(total)
    avg = total / len(numbers)
    return avg
 

def get_average(student):
    homework = average(student["homework"])
    quizzes = average(student["quizzes"])
    tests = average(student["tests"])
    return 0.1*homework + 0.3*quizzes + 0.6*tests


def get_letter_grade(score):
    if score >= 90:
        return "A"
    elif score >= 80:
        return "B"
    elif score >= 70:
        return "C"
    elif score >= 60:
        return "D"
    else:
        return "F"

def get_class_average(z):
   results = []
   for a in z:
        results.append(get_average(a))
        return average(results)
  

students = [lloyd, alice, tyler]  

print get_class_average(students)
print get_letter_grade(get_class_average(students))

for x in students: 
    print "%s average is %d, the grade obtained is %s" % (x["name"], get_average(x), get_letter_grade(get_average(x)))
    

#print get_letter_grade(get_average(x))

1.	n.pop(index) will remove the item at index from the list and return it to you:
n = [1, 3, 5]
n.pop(1)
# Returns 3 (the item at index 1)
print n
# prints [1, 5]
1.	n.remove(item) will remove the actual item if it finds it:
n.remove(1)
# Removes 1 from the list,
# NOT the item at index 1
print n
# prints [3, 5]
1.	del(n[1]) is like .pop in that it will remove the item at the given index, but it won't return it:
del(n[1])
# Doesn't return anything
print n
# prints [1, 5]

n = [3, 5, 7]

def print_list(x):
    for i in range(0, len(x)):
        print x[i] # return all the elements one by one, not list.
        
print_list(n)    

range(6) # => [0,1,2,3,4,5]
range(1,6) # => [1,2,3,4,5]
range(1,6,3) # => [1,4]

The range function has three different versions:
1.	range(stop)
2.	range(start, stop)
3.	range(start, stop, step)

Method 1 - for item in list:
for item in list:
    print item
Method 2 - iterate through indexes:
for i in range(len(list)):
    print list[i]
Method 1 is useful to loop through the list, but it's not possible to modify the list this way. Method 2 uses indexes to loop through the list, making it possible to also modify the list if needed. Since we aren't modifying the list, feel free to use either one on this lesson!

a = [1, 2, 3]
b = [4, 5, 6]
print a + b
# prints [1, 2, 3, 4, 5, 6]

list_of_lists = [[1,2,3], [4,5,6]]

for lst in list_of_lists:
    for item in lst:
        print item

n = [[1, 2, 3], [4, 5, 6, 7, 8, 9]]
# Add your function here
def flatten(lists):
    results = []
    for lst in lists:
        results = results + lst
    return results

print flatten(n)
letters = ['a', 'b', 'c', 'd']
print " ".join(letters)
print "---".join(letters)
1.	In the example above, we create a list called letters.
2.	Then, we print a b c d. The .joinmethod uses the string to combine the items in the list.
3.	Finally, we print a---b---c---d. We are calling the .join function on the "---" string.
board = []

def ocean_maker(lst):
    for array in range(0,5):
        lst.append(["O"]*5)
    return lst
    
ocean_maker(board)

def print_board(board):
    for row in board:
        print " ".join(row)

print_board(board)
