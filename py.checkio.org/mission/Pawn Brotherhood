def safe_pawns(pawns):
    count = 0
    matrix = []
    a = ""
    colref = {"a":1,"b":2,"c":3,"d":4,"e":5,"f":6,"g":7,"h":8}
        
    for pos in pawns:
        for value in pos:
            if value.lower() in "abcdefgh":
                col = colref[value.lower()]
                #print (colref[value.lower()])
            else:    
                row = int(value)
                #print (value)
        matrix += [[row,col]]
    
    for x in matrix:
        if x[0] == 1:
            count = count
        elif x[1] == 1 and x[0] != 1 and [x[0]-1,x[1]+1] in matrix:
            count += 1
        elif x[1] == 8 and x[0] != 1 and [x[0]-1,x[1]-1] in matrix:
            count += 1
        else:
            point1 = [x[0]-1,x[1]-1] in matrix
            point2 = [x[0]-1,x[1]+1] in matrix
            if (point1 or point2) == True:
                count += 1    
    return count

if __name__ == '__main__':
    #These "asserts" using only for self-checking and not necessary for auto-testing
    assert safe_pawns({"b4", "d4", "f4", "c3", "e3", "g5", "d2"}) == 6
    assert safe_pawns({"b4", "c4", "d4", "e4", "f4", "g4", "e5"}) == 1
